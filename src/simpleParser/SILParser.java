/* Generated By:JavaCC: Do not edit this line. SILParser.java */
package simpleParser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;

public class SILParser implements SILParserConstants {

        public static HashMap<String, Integer> variables = new HashMap<String, Integer>();
        public static HashMap<String, Integer> lastStateVariables;

        public static HashMap<String, Integer> copyMap()
    {
        HashMap<String, Integer> currentStateVariables = new HashMap<String, Integer>();
        for (HashMap.Entry<String, Integer> entry : variables.entrySet()) {
            currentStateVariables.put(entry.getKey(),
                           entry.getValue());
        }
        return currentStateVariables;
    }

    public static void main(String[] args) throws Exception {
      System.out.println("Enter input file name or press enter to input from console: ");
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      String file = reader.readLine();
      SILParser parser;

          if (file.isEmpty()) {
            System.out.println("Please enter your phrase: ");
            parser = new SILParser(System.in);
          }else {
            try {
                FileReader fileReader = new FileReader("src/resources/" + file + ".txt");
                parser = new SILParser(fileReader);
                } catch (FileNotFoundException e) {
                        System.err.println("Error: File Not Found");
                        System.err.println("Please put the file in the resources");
                        return;
                }
          }

      parser.Input();
    }

/** Root production. */
  static final public void Input() throws ParseException {
    Command(true);
    jj_consume_token(0);
    System.out.println("Evaluation\u005cn==========");
        if (variables != null) {
          for (HashMap.Entry<String, Integer> entry : variables.entrySet()) {
                        System.out.println(entry.getKey() + " value is " + entry.getValue());
                }
                System.out.println("\u005cn");
        }
  }

  static final public int ArithmeticExpression(boolean eval) throws ParseException {
        Token tok;
        int first, second;
        boolean addition = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      first = ArithmeticExpression(eval);
      tok = jj_consume_token(SIGN);
                                                                      if (tok.toString().equals("-")) addition = false;
      second = ArithmeticExpression(eval);
      jj_consume_token(20);
                  if (eval)
                          if (addition) {if (true) return first + second;}
                          else if (first >= second) {if (true) return first - second;}
                          else {if (true) throw new RuntimeException("cannot evaluate negative numbers");}
                  {if (true) return 0;}
      break;
    case NUM:
      tok = jj_consume_token(NUM);
                  {if (true) return Integer.parseInt(tok.toString());}
      break;
    case VAR:
      tok = jj_consume_token(VAR);
                  {if (true) return eval ? SILParser.variables.get(tok.toString()) : 0;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean BooleanExpression(boolean eval) throws ParseException {
        boolean firstBool, secondBool;
        int firstInt, secondInt;
    if (jj_2_1(2147483647)) {
      jj_consume_token(19);
      firstBool = BooleanExpression(eval);
      jj_consume_token(AND);
      secondBool = BooleanExpression(eval);
      jj_consume_token(20);
                  {if (true) return firstBool && secondBool;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        firstInt = ArithmeticExpression(eval);
        jj_consume_token(EQUAL);
        secondInt = ArithmeticExpression(eval);
        jj_consume_token(20);
                  {if (true) return firstInt==secondInt ? true : false;}
        break;
      case 21:
        jj_consume_token(21);
        firstBool = BooleanExpression(eval);
                  {if (true) return !firstBool;}
        break;
      case TRUE:
        jj_consume_token(TRUE);
                  {if (true) return true;}
        break;
      case FALSE:
        jj_consume_token(FALSE);
                  {if (true) return false;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Command(boolean eval) throws ParseException {
    statment(eval);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      Command(eval);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void statment(boolean eval) throws ParseException {
        int num;
        Token name;
        Token tok;
        boolean bool;
        String whileCommand = "while";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      break;
    case VAR:
      name = jj_consume_token(VAR);
      jj_consume_token(23);
      num = ArithmeticExpression(eval);
                  if (eval) SILParser.variables.put(name.toString(), num);
      break;
    case IF:
      jj_consume_token(IF);
      bool = BooleanExpression(eval);
      jj_consume_token(THEN);
      Command(bool && eval);
      jj_consume_token(ELSE);
      Command(!bool && eval);
      break;
    case WHILE:
      jj_consume_token(WHILE);
                  int i = 1;
                  while (getToken(i).kind != 0) {
                    whileCommand +=  " " + getToken(i).image;
                    i++;
                  }
      bool = BooleanExpression(eval);
      jj_consume_token(24);
      Command(bool && eval);
                  if (bool && eval) {
                    if (lastStateVariables != null && lastStateVariables.equals(variables)) {
                      System.out.println("Infinite Computation ");
                      break;
                    }
                    lastStateVariables = copyMap();
                    SILParser.ReInit(new ByteArrayInputStream(whileCommand.getBytes()));
                    SILParser.Command(true);
                  }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(SIGN)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) {
    jj_scanpos = xsp;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SILParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80280,0x280060,0x1000,0x412200,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SILParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SILParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SILParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SILParser(SILParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SILParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
