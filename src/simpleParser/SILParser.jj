PARSER_BEGIN(SILParser)
package simpleParser;

import java.io.StringReader;

public class SILParser {
  
    public static void main(String[] args) throws Exception {
      StringReader in = new StringReader(System.console().readLine());
      SILParser parser = new SILParser(in);
      SILParser.Input();
      
    }
    
}

PARSER_END(SILParser)



SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
  		<DIGIT: ["0"-"9"]>
	|  	<LETTER: ["a"-"f"]>
	| 	< SIGN: "+"|"-">
  }


/** Root production. */
void Input() :
{}
{
  Command() <EOF>
  { System.out.println("End Reached"); }
}

int Num():
{
	String num;
  }
{
  (<DIGIT>)+
  { return 6; }
}

void Var(): {}
{
  (<LETTER>)+
}
int ArithmeticExpression():
{
	int first, second;
	boolean addition = true;
	String sign;
}
{
		("(" first=ArithmeticExpression()) (sign=<SIGN> { if (sign=="-") addition = false; }) (second=ArithmeticExpression() ")")
		{ return first + second; }
 	|	first=Num()
 		{ return first; }
	|	Var()
		{ return 1; }
}

void BooleanExpression(): {}
{
  		LOOKAHEAD(2)
	 	"(" BooleanExpression() "^" BooleanExpression() ")"
	| 	"("ArithmeticExpression() "==" ArithmeticExpression()")"
	| 	"!" BooleanExpression()
	| 	"tt" | "ff"
}
void Command(): {}
{
  	LOOKAHEAD(2)
  	statment() |
  	statment() ";" Command()
}

void statment(): {}
{
		"skip" | Var() ":=" ArithmeticExpression()
	|	"if" BooleanExpression() "then" Command() "else" Command()
	| 	"while" BooleanExpression() "do" Command()
}

