PARSER_BEGIN(SILParser)
package simpleParser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;

public class SILParser {

	public static HashMap<String, Integer> variables = new HashMap<String, Integer>();
	public static HashMap<String, Integer> lastStateVariables;
	
	public static HashMap<String, Integer> copyMap()
    {
        HashMap<String, Integer> currentStateVariables = new HashMap<String, Integer>();
        for (HashMap.Entry<String, Integer> entry : variables.entrySet()) {
            currentStateVariables.put(entry.getKey(),
                           entry.getValue());
        }
        return currentStateVariables;
    }

    public static void main(String[] args) throws Exception {
      System.out.println("Enter input file name or press enter to input from console: ");
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      String file = reader.readLine();
      SILParser parser;
      
	  if (file.isEmpty()) {
	    System.out.println("Please enter your phrase: ");
	    parser = new SILParser(System.in);
	  }else {
	    try { 
	    	FileReader fileReader = new FileReader("src/resources/" + file + ".txt");
	    	parser = new SILParser(fileReader);
	  	} catch (FileNotFoundException e) {
			System.err.println("Error: File Not Found");
			System.err.println("Please put the file in the resources");
			return;
	  	}
	  }
	  
      parser.Input();
    }

}

PARSER_END(SILParser)



SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
    	< TRUE: "tt" >
	| 	< FALSE: "ff" >
  	| 	< NUM: (<DIGIT>)+ >
 	| 	< DIGIT: ["0"-"9"] >
	|	< VAR: (<LETTER>)+ >
	|  	< LETTER: ["a"-"f"] >
	| 	< SIGN: "+"|"-" >
	| 	< SEMICOLON: ";" >
	| 	< IF: "if" >
	| 	< THEN: "then" >
	| 	< ELSE: "else" >
	| 	< WHILE: "while" >
  }

/** Root production. */
void Input() :
{}
{
  Command(true) <EOF>
  {
    System.out.println("Evaluation");
	if (lastStateVariables != null) {
	  for (HashMap.Entry<String, Integer> entry : lastStateVariables.entrySet()) {
	  		System.out.println(entry.getKey() + " value is " + entry.getValue());
	  	}
	}
  }
}

int ArithmeticExpression():
{
  	Token tok;
	int first, second;
	boolean addition = true;
}
{
		("(" first=ArithmeticExpression()) (tok= <SIGN> { if (tok.toString().equals("-")) addition = false; }) (second=ArithmeticExpression() ")")
		{ return addition? first + second : first - second; }
 	|	tok=<NUM>
 		{
 		  return Integer.parseInt(tok.toString());
 		}
	|	tok=<VAR>
		{ return SILParser.variables.get(tok.toString()); }
}

boolean BooleanExpression():
{
	boolean firstBool, secondBool;
	int firstInt, secondInt;
  }
{
  		LOOKAHEAD(2)
	 	"(" firstBool=BooleanExpression() "^" secondBool=BooleanExpression() ")"
	 	{ return  firstBool && secondBool;}
	| 	"("firstInt=ArithmeticExpression() "==" secondInt=ArithmeticExpression()")"
		{ return firstInt==secondInt ? true : false; }
	| 	"!" firstBool=BooleanExpression()
		{ return !firstBool; }
	|	<TRUE>
		{ return true; }
	|	<FALSE>
		{ return false; }
}



void Command(boolean eval): {}
{
  	statment(eval) [LOOKAHEAD(1) <SEMICOLON> Command(eval)]
}

void statment(boolean eval):
{
	int num;
	Token name;
	Token tok;
	boolean bool;
	String whileCommand = "while";
}
{
		"skip"
	| 	name=<VAR> ":=" num=ArithmeticExpression()
		{
		  if (eval) {
		  SILParser.variables.put(name.toString(), num);
		  System.out.println("var is "+SILParser.variables.get(name.toString()));
		  }
		}
	|	<IF> bool=BooleanExpression() <THEN> Command(bool) <ELSE> Command(!bool)
		{
		  System.out.println("Boolean Expression evaluated "+bool);
		}
	| 	<WHILE>
		{
		  int i = 1;
		  while (getToken(i).kind != 0) {
		    whileCommand +=  " " + getToken(i).image;
		    i++;
		  }
		}
		bool = BooleanExpression()  "do" Command(bool) {
		  if (bool) {
		    if (lastStateVariables != null && lastStateVariables.equals(variables)) {
		      System.out.println("Infinite Computation ");
		      break;
		    }
		    lastStateVariables = copyMap();
		    SILParser.ReInit(new ByteArrayInputStream(whileCommand.getBytes()));
		    SILParser.Command(true); 
		  }
		}
}
