PARSER_BEGIN(SILParser)
package simpleParser;

import java.io.StringReader;
import java.util.HashMap;

public class SILParser {

	public static HashMap<String, Integer> variables = new HashMap<String, Integer>();

    public static void main(String[] args) throws Exception {
      SILParser parser = new SILParser(System.in);
      SILParser.Input();
    }

}

PARSER_END(SILParser)



SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
    	< TRUE: "tt" >
	| 	< FALSE: "ff" >
  	| 	< NUM: (<DIGIT>)+ >
 	| 	< DIGIT: ["0"-"9"] >
	|	< VAR: (<LETTER>)+ >
	|  	< LETTER: ["a"-"f"] >
	| 	< SIGN: "+"|"-" >
  }

/** Root production. */
void Input() :
{}
{
  Command() <EOF>
}

int ArithmeticExpression():
{
  	Token tok;
	int first, second;
	boolean addition = true;
}
{
		("(" first=ArithmeticExpression()) (tok= <SIGN> { if (tok.toString() =="-") addition = false; }) (second=ArithmeticExpression() ")")
		{ return addition? first + second : first - second; }
 	|	tok=<NUM>
 		{
 		  //System.out.println(tok.toString());
 		  return Integer.parseInt(tok.toString());
 		}
	|	tok=<VAR>
		{ return SILParser.variables.get(tok.toString()); }
}

boolean BooleanExpression():
{
	boolean firstBool, secondBool;
	int firstInt, secondInt;
  }
{
  		LOOKAHEAD(2)
	 	"(" firstBool=BooleanExpression() "^" secondBool=BooleanExpression() ")"
	 	{ return  first && second;}
	| 	"("firstInt=ArithmeticExpression() "==" secondInt=ArithmeticExpression()")"
		{ return firstInt==secondInt ? true : false; }
	| 	"!" firstBool=BooleanExpression()
		{ return !firstBool; }
	|	< TRUE >
		{ return true; }
	|	< FALSE >
		{ return false; }
}
void Command(): {}
{
  	LOOKAHEAD(2)
  	statment() |
  	statment() ";" Command()
}

void statment():
{
	int num;
	Token name;
  }
{
		"skip"
	| 	name=< VAR > ":=" num=ArithmeticExpression()
		{ SILParser.variables.put(name.toString(), num); }
	|	"if" BooleanExpression() "then" Command() "else" Command()
	| 	"while" BooleanExpression() "do" Command()
}
