PARSER_BEGIN(SILParser)
package simpleParser;

import java.io.StringReader;

public class SILParser {
  
    public static void main(String[] args) throws Exception {
      StringReader in = new StringReader(System.console().readLine());
      SILParser parser = new SILParser(in);
      SILParser.Input();
      
    }
    
}

PARSER_END(SILParser)



SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
  		<TRUE: "tt">
  	| 	<FALSE: "ff">
 	|	<NUM: (<DIGIT>)+ >
 	|	<VAR: (<LETTER>)+ >
	|	<DIGIT: ["0"-"9"]>
	|  	<LETTER: ["a"-"f"]>
	| 	<SIGN: "+"|"-">
  }

/** Root production. */
void Input() :
{}
{
  Command()
  { System.out.println("End Reached"); }
}

int ArithmeticExpression():
{
  	Token temp;
	int first, second;
	boolean addition = true;
	Token sign;
}
{
		("(" first=ArithmeticExpression()) (sign= <SIGN> { if (sign.toString() =="-") addition = false; }) (second=ArithmeticExpression() ")")
		{ return first + second; }
 	|	temp = <NUM>
 		{
 		  System.out.println(temp.toString());
 		  return Integer.parseInt(temp.toString());
 		}
	|	<VAR>
		{ return 1; }
}

void BooleanExpression(): {}
{
  		LOOKAHEAD(2)
	 	"(" BooleanExpression() "^" BooleanExpression() ")"
	| 	"("ArithmeticExpression() "==" ArithmeticExpression()")"
	| 	"!" BooleanExpression()
	| 	<TRUE> | <FALSE>
}
void Command(): {}
{
  	LOOKAHEAD(2)
  	statment() |
  	statment() ";" Command()
}

void statment(): {}
{
		"skip" | <VAR> ":=" ArithmeticExpression()
	|	"if" BooleanExpression() "then" Command() "else" Command()
	| 	"while" BooleanExpression() "do" Command()
}

